When would you want to use a remote repository rather than keeping all your work local?
When I want to share my project with someone else, 
when I work from several computers and need a single reference repository,
When i need to backup my files

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Having git maintaining my repository automatically up to date with the remote would mean :
- that I would inherit any change made to the remote, while it may break what I am doing.
- that I would get a signifcant network overhead to get all changes in real time while there is no need for it.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
fork is to copy a github repository in my own github space, while keeping a link to tehcopied repository. Is used when  I need to derive a projetc from an existing project on github, allows to work on the new project without pushing my chnages to teh original project.
clone is to copy a repository (from a local repository or from a github repository). Is used whenever I want to woek locally on a remote project, or start from an existing local prohect without any intention to push baxk my changes to the original project.
branch is to create a new line of colmmits within a depository. Is used when i need to maintain several versions of the sa e project for some time. 

What is the benefit of having a copy of the last known state of the remote stored locally?
It makes it easier to keep track of the changes brought since the last sync
It makes it easier to reconcile the changes when I next synchronize with the remote, since only the changes that were made on the remote and locally since the last sync need to be taken into account.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
There would probably a reference area. Whenever someones want to make a change he first needs to inform all the collaborators that he is working on the reference. When he is done everyones needs to updte their work area from the reference area.
As an alternative there could be someone who is in charge of merging the changes of the collaborators in the reference area. Avery time I want to exchange the reference I would need to send the modified files and explain what I have modified.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
Whenever I need to have different versions of the same project available at the same time and for a certain duration.I avn for instance have a matser branche with the production code and a branch with a new feature that does not get merged in the master until it's fully debugged and tested.